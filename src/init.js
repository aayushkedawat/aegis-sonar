import fs from "fs";
import path from "path";
import { execa } from "execa";
import { fileURLToPath } from "url";

/* ---------------- helpers ---------------- */

function copyTemplateIfMissing(pkgRoot, templateRelPath, destRelPath) {
  const src = path.join(pkgRoot, "templates", templateRelPath);
  const dest = path.join(process.cwd(), destRelPath);
  if (!fs.existsSync(src)) {
    console.warn("â„¹ Template not found in package:", src);
    return false;
  }
  if (fs.existsSync(dest)) {
    console.log("â„¹ Skipping (exists):", dest);
    return false;
  }
  fs.writeFileSync(dest, fs.readFileSync(src, "utf-8"), "utf-8");
  console.log("âœ” Created from template:", dest);
  return true;
}

function appendGitignoreLines(gitignorePath, lines) {
  let existing = fs.existsSync(gitignorePath)
    ? fs.readFileSync(gitignorePath, "utf-8")
    : "";
  const set = new Set(existing.split(/\r?\n/).filter(Boolean));
  const toAdd = lines.filter((l) => !set.has(l));
  if (!toAdd.length) {
    console.log("â„¹ .gitignore already has entries");
    return;
  }
  if (existing && !existing.endsWith("\n")) existing += "\n";
  fs.writeFileSync(gitignorePath, existing + toAdd.join("\n") + "\n", "utf-8");
  console.log("âœ” Updated:", gitignorePath);
}

async function installPrePushHook(repoRoot, hooksPathArg) {
  const hooksPath = hooksPathArg || path.join(repoRoot, ".git", "hooks");
  fs.mkdirSync(hooksPath, { recursive: true });
  const hookFile = path.join(hooksPath, "pre-push");
  const content = `#!/usr/bin/env sh
# Auto-generated by Aegis (aegis-sonar)
npx --yes aegis run "$@"
`;
  fs.writeFileSync(hookFile, content, "utf-8");
  fs.chmodSync(hookFile, 0o755);
  console.log("âœ… pre-push hook installed at", hookFile);
}

function resolvePackageRootFromThisFile() {
  const thisDir = path.dirname(fileURLToPath(import.meta.url));
  return path.resolve(path.join(thisDir, ".."));
}

function scaffoldConfigs(repoRoot) {
  console.log("ðŸ§° Scaffolding Sonar config files...");
  process.chdir(repoRoot);

  const pkgRoot = resolvePackageRootFromThisFile();
  copyTemplateIfMissing(
    pkgRoot,
    "sonar-project.properties",
    "sonar-project.properties"
  );
  copyTemplateIfMissing(pkgRoot, ".aegisrc.json", ".aegisrc.json");

  try {
    appendGitignoreLines(path.join(repoRoot, ".gitignore"), [
      "sonar-report.txt",
      "sonar-issues.txt",
      "sonar-issues.json",
      "sonar-issues.md",
    ]);
  } catch (e) {
    console.warn("â„¹ Could not update .gitignore:", e?.message || e);
  }

  console.log("ðŸ§© Scaffold complete.");
}

/* ---------------- main (refactored) ---------------- */

export async function initHook(argv) {
  const { stdout: repoRoot } = await execa("git", [
    "rev-parse",
    "--show-toplevel",
  ]);

  await installPrePushHook(repoRoot, argv?.hooksPath);

  if (argv?.scaffold) {
    scaffoldConfigs(repoRoot);
  }

  console.log(
    "Tip: set SONAR_TOKEN; ensure sonar-scanner on PATH; add sonar-project.properties."
  );
}
